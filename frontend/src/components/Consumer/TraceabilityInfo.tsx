import React from 'react';
import { ArrowLeft, MapPin, Calendar, User, Award, Link } from 'lucide-react';
import type { ProduceBatch } from '../../types';
import { Card } from '../UI/Card';
import { Button } from '../UI/Button';
import { StatusBadge } from '../UI/StatusBadge';
import { mockQualityScores, mockPriceHistory, mockTransactions } from '../../data/mockData';

interface TraceabilityInfoProps {
  batch: ProduceBatch;
  onBack: () => void;
}

export const TraceabilityInfo: React.FC<TraceabilityInfoProps> = ({ batch, onBack }) => {
  const qualityData = mockQualityScores.find(q => q.batchId === batch.id);
  const priceHistory = mockPriceHistory.filter(p => p.batchId === batch.id);
  const transactions = mockTransactions.filter(t => t.batchId === batch.id);

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  return (
    <div className="max-w-4xl mx-auto space-y-6 p-4 sm:p-6">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:space-x-4 mb-6 space-y-3 sm:space-y-0">
        <Button variant="outline" icon={ArrowLeft} onClick={onBack}>
          Back to Scanner
        </Button>
        <div>
          <h2 className="text-xl sm:text-2xl font-bold text-gray-900">
            {batch.cropType} - {batch.variety}
          </h2>
          <p className="text-gray-600 text-sm">Batch ID: {batch.id}</p>
        </div>
      </div>

      {/* Main Product Info */}
      <Card>
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {batch.imageUrl && (
            <div>
              <img
                src={batch.imageUrl}
                alt={batch.cropType}
                className="w-full h-52 sm:h-64 object-cover rounded-lg border border-gray-200"
              />
            </div>
          )}

          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-semibold text-gray-900">Product Information</h3>
              <StatusBadge status={batch.status} />
            </div>

            <div className="space-y-3 text-sm">
              <div className="flex items-center space-x-2">
                <User className="w-4 h-4 text-gray-500" />
                <span><strong>Farmer:</strong> {batch.farmerName}</span>
              </div>
              <div className="flex items-center space-x-2">
                <MapPin className="w-4 h-4 text-gray-500" />
                <span><strong>Origin:</strong> {batch.location}</span>
              </div>
              <div className="flex items-center space-x-2">
                <Calendar className="w-4 h-4 text-gray-500" />
                <span><strong>Harvested:</strong> {formatDate(batch.harvestDate)}</span>
              </div>
              <div className="flex items-center space-x-2">
                <Award className="w-4 h-4 text-gray-500" />
                <span><strong>Quantity:</strong> {batch.quantity} {batch.unit}</span>
              </div>
            </div>

            {batch.certifications.length > 0 && (
              <div>
                <h4 className="font-medium text-gray-700 mb-2">Certifications</h4>
                <div className="flex flex-wrap gap-2">
                  {batch.certifications.map(cert => (
                    <span
                      key={cert}
                      className="px-3 py-1 bg-green-50 text-green-700 text-xs sm:text-sm rounded-full border border-green-200"
                    >
                      {cert}
                    </span>
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>
      </Card>

      {/* Quality Scores */}
      {qualityData && (
        <Card title="AI Quality Assessment" subtitle={`Generated by ${qualityData.aiModel} on ${formatDate(qualityData.generatedAt)}`}>
          <div className="space-y-4">
            <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-2">
              <span className="text-base sm:text-lg font-semibold text-gray-900">Overall Quality Score</span>
              <span
                className={`text-2xl sm:text-3xl font-bold ${
                  qualityData.overallScore >= 90 ? 'text-green-600' :
                  qualityData.overallScore >= 75 ? 'text-yellow-600' : 'text-red-600'
                }`}
              >
                {qualityData.overallScore}/100
              </span>
            </div>

            <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
              {[
                { label: 'Freshness', value: qualityData.freshness },
                { label: 'Appearance', value: qualityData.appearance },
                { label: 'Size', value: qualityData.size },
                { label: 'Pesticides', value: qualityData.pesticides },
                { label: 'Nutrients', value: qualityData.nutrients }
              ].map(metric => (
                <div key={metric.label} className="text-center">
                  <div className="text-xs sm:text-sm text-gray-600 mb-1">{metric.label}</div>
                  <div
                    className={`text-base sm:text-lg font-semibold ${
                      metric.value >= 90 ? 'text-green-600' :
                      metric.value >= 75 ? 'text-yellow-600' : 'text-red-600'
                    }`}
                  >
                    {metric.value}
                  </div>
                </div>
              ))}
            </div>
          </div>
        </Card>
      )}

      {/* Price History */}
      {priceHistory.length > 0 && (
        <Card title="Price History" subtitle="Track pricing throughout the supply chain">
          <div className="space-y-3">
            {priceHistory.map((price, index) => (
              <div key={index} className="flex flex-col sm:flex-row sm:items-center sm:justify-between p-3 bg-gray-50 rounded-lg">
                <div>
                  <div className="font-medium text-gray-900">{price.retailer}</div>
                  <div className="text-sm text-gray-600">{price.location}</div>
                </div>
                <div className="text-right mt-2 sm:mt-0">
                  <div className="text-lg font-semibold text-gray-900">${price.price}/kg</div>
                  <div className="text-xs sm:text-sm text-gray-600">{new Date(price.date).toLocaleDateString()}</div>
                </div>
              </div>
            ))}
          </div>
        </Card>
      )}

      {/* Blockchain Transaction Log */}
      <Card title="Blockchain Transaction Log" subtitle="Immutable record of all transactions">
        <div className="space-y-3">
          {transactions.map((tx) => (
            <div key={tx.id} className="flex flex-col sm:flex-row sm:items-center sm:justify-between p-3 border border-gray-200 rounded-lg">
              <div className="flex-1">
                <div className="flex flex-wrap items-center gap-2 mb-1">
                  <span className="font-medium text-gray-900 capitalize">{tx.type}</span>
                  <span
                    className={`px-2 py-1 text-xs rounded-full ${
                      tx.status === 'confirmed'
                        ? 'bg-green-100 text-green-800'
                        : tx.status === 'pending'
                        ? 'bg-yellow-100 text-yellow-800'
                        : 'bg-red-100 text-red-800'
                    }`}
                  >
                    {tx.status}
                  </span>
                </div>
                <div className="text-sm text-gray-600">
                  From: {tx.from} â†’ To: {tx.to}
                </div>
                <div className="text-xs text-gray-500 mt-1">{formatDate(tx.timestamp)}</div>
              </div>
              <div className="text-right mt-2 sm:mt-0">
                <div className="flex items-center space-x-1 text-xs text-gray-500">
                  <Link className="w-3 h-3" />
                  <span className="font-mono">{tx.blockchainTxId.slice(0, 8)}...</span>
                </div>
              </div>
            </div>
          ))}
        </div>
      </Card>
    </div>
  );
};
